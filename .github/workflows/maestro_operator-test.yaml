name: Maestro Operator Test
on:
  push:
    branches: [ "main" ]
    paths:
    - '**'
  pull_request:
    branches: [ "main" ]
    paths:
    - '**'
jobs:
  test-in-kind:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: |
        cd operator
        make docker-build
        make engine-docker-build
        docker tag docker.io/library/controller:latest localhost/controller:latest
        docker tag docker.io/library/maestro-engine:latest localhost/maestro-engine:latest
    - name: Install Kind
      run: |
        curl -Lo ./kind "https://github.com/kubernetes-sigs/kind/releases/download/v0.20.0/kind-$(uname)-amd64"
        chmod +x ./kind
        sudo mv kind /usr/local/bin
        which kind
    - name: Create Kind cluster
      run: |
        kind create cluster --config tests/integration/deploys/kind-config.yaml 
    - name: Load images cluster
      run: |
        kind load docker-image localhost/controller:latest 
        kind load docker-image localhost/maestro-engine:latest 
    - name: Install Maestro Operator
      run: |
        cd operator
        kubectl apply -f config/crd/bases
        make deploy
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install uv and activate the environment
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: true
    - name: Install dependencies
      run: |
        uv sync --all-extras
    - name: Deploy test agents, workflow, configmap and workflowrun
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/src
        maestro create-cr https://github.com/AI4quantum/maestro-demos/blob/main/workflows/weather-checker.ai/agents.yaml
        maestro create-cr https://github.com/AI4quantum/maestro-demos/blob/main/workflows/weather-checker.ai/workflow.yaml
        kubectl apply -f operator/test/config/test-configmap.yaml
        kubectl apply -f operator/test/config/test-workflowrun.yaml
        sleep 15

        svc=$(kubectl get svc weather-checker-ai)
        if [ -z "$svc" ]; then
            exit 1
        else
            echo "Service is created"
        fi
        pods=$(kubectl get pod -l app.kubernetes.io/instance=weather-checker-ai)
        # Check if there are any pods
        if [ -z "$pods" ]; then
          exit 1
        else
          echo "Pod is created"
        fi

    - name: Wait for pod to be ready
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=weather-checker-ai --timeout=60s

    - name: Configure service and send request
      run: |
        # Convert service to NodePort
        kubectl patch svc weather-checker-ai -p '{"spec": {"type": "NodePort"}}'
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        sleep 10
        
        # Debug information
        echo "Checking pod status..."
        kubectl get pods -l app.kubernetes.io/instance=weather-checker-ai
        echo "Checking service status..."
        kubectl get svc weather-checker-ai
        echo "Checking pod logs..."
        kubectl logs -l app.kubernetes.io/instance=weather-checker-ai
        
        # Get NodePort
        NODE_PORT=$(kubectl get svc weather-checker-ai -o jsonpath="{.spec.ports[0].nodePort}")
        
        # Send request
        echo "Sending request to http://127.0.0.1:${NODE_PORT}/?Prompt=Los+angels"
        curl -v -L --max-time 30 "http://127.0.0.1:${NODE_PORT}/?Prompt=Los+angels"
        
        # Check pod status
        POD_DETAILS=$(kubectl get pod -l app.kubernetes.io/instance=weather-checker-ai -o json)
        RESTART_COUNT=$(echo $POD_DETAILS | jq -r '.items[0].status.containerStatuses[0].restartCount')
        if [ "$RESTART_COUNT" -eq 0 ]; then
            echo "Pod has not been restarted."
        else
            exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        kind delete cluster
