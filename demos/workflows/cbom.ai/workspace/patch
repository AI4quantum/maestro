From 495e5e8470da90d0ba4c315de726e75ed4a0847e Mon Sep 17 00:00:00 2001
From: Fixer <patcher@cbom.ai>
Date: Wed, 4 Jun 2025 18:31:25 -0700
Subject: [PATCH] CBOM patch applied

---
 .../encryption/FieldLevelEncryptionParams.java       |  2 +-
 .../developer/encryption/jwe/JweObject.java          | 12 ++++++------
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/main/java/com/mastercard/developer/encryption/FieldLevelEncryptionParams.java b/src/main/java/com/mastercard/developer/encryption/FieldLevelEncryptionParams.java
index 8d30410..d2474e6 100644
--- a/src/main/java/com/mastercard/developer/encryption/FieldLevelEncryptionParams.java
+++ b/src/main/java/com/mastercard/developer/encryption/FieldLevelEncryptionParams.java
@@ -17,7 +17,7 @@ import static com.mastercard.developer.utils.EncodingUtils.encodeBytes;
  */
 public final class FieldLevelEncryptionParams {
 
-    private static final Integer SYMMETRIC_KEY_SIZE = 128;
+    private static final Integer SYMMETRIC_KEY_SIZE = 256;
     static final String SYMMETRIC_KEY_TYPE = "AES";
 
     private final String ivValue;
diff --git a/src/main/java/com/mastercard/developer/encryption/jwe/JweObject.java b/src/main/java/com/mastercard/developer/encryption/jwe/JweObject.java
index 7e38a36..6a04a47 100644
--- a/src/main/java/com/mastercard/developer/encryption/jwe/JweObject.java
+++ b/src/main/java/com/mastercard/developer/encryption/jwe/JweObject.java
@@ -28,8 +28,8 @@ public class JweObject {
     private final String cipherText;
     private final String authTag;
 
-    private static final String A128CBC_HS256 = "A128CBC-HS256";
-    private static final List<String> AES_GCM_ENCRYPTION_METHODS = Arrays.asList("A128GCM", "A192GCM", "A256GCM");
+    private static final String A256CBC_HS256 = "A256CBC-HS256";
+    private static final List<String> AES_GCM_ENCRYPTION_METHODS = Arrays.asList("A256GCM", "A192GCM", "A256GCM");
 
     private JweObject(JweHeader header, String rawHeader, String encryptedKey, String iv, String cipherText, String authTag) {
         this.header = header;
@@ -48,7 +48,7 @@ public class JweObject {
 
         if (AES_GCM_ENCRYPTION_METHODS.contains(encryptionMethod)) {
             plainText = AESGCM.decrypt(cek, this);
-        } else if (encryptionMethod.equals(A128CBC_HS256)) {
+        } else if (encryptionMethod.equals(A256CBC_HS256)) {
             plainText = AESCBC.decrypt(cek, this);
         } else {
             throw new EncryptionException(String.format("Encryption method %s not supported", encryptionMethod));
@@ -64,7 +64,7 @@ public class JweObject {
 
         byte[] iv = AESEncryption.generateIv(config.getIVSize()).getIV();
         byte[] payloadBytes = payload.getBytes();
-        GCMParameterSpec gcmSpec = new GCMParameterSpec(128, iv);
+        GCMParameterSpec gcmSpec = new GCMParameterSpec(256, iv);
 
         String headerString = header.toJson();
         String encodedHeader = EncodingUtils.base64UrlEncode(headerString.getBytes());
@@ -75,9 +75,9 @@ public class JweObject {
 
         byte[] cipherOutput = AESGCM.cipher(aesKey, gcmSpec, payloadBytes, aad, Cipher.ENCRYPT_MODE);
 
-        int tagPos = cipherOutput.length - ByteUtils.byteLength(128);
+        int tagPos = cipherOutput.length - ByteUtils.byteLength(256);
         byte[] cipherText = ByteUtils.subArray(cipherOutput, 0, tagPos);
-        byte[] authTag = ByteUtils.subArray(cipherOutput, tagPos, ByteUtils.byteLength(128));
+        byte[] authTag = ByteUtils.subArray(cipherOutput, tagPos, ByteUtils.byteLength(256));
 
         return serialize(encodedHeader, encryptedKey, EncodingUtils.base64UrlEncode(iv), EncodingUtils.base64UrlEncode(cipherText), EncodingUtils.base64UrlEncode(authTag));
     }
-- 
2.39.5 (Apple Git-154)

