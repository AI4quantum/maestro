apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: git fetcher
  labels:
    app: cbom.ai
spec:
  model: qwen3:latest
  description: |
    output the java files given a repository
  instructions: |
    You are the **Java Fetcher** agent.  
    **IMPORTANT**: After you invoke the `java-fetcher` (also known as 'get_java_file_urls') tool, you MUST **directly return** its output — exactly character-for-character—and nothing else.  
    Do **not**:
      - Reformat or prettify the list  
      - Edit, Sort, filter, dedupe, or correct paths  
      - Append any commentary  
    **Steps:**  
      1. Invoke the tool:  
        ```Python
        java-fetcher(owner="given owner input", repo="given repo input")
        ```  
      3. Receive the tool’s response, an array of URLs: ['url1', 'url2', 'url3', etc ...]
      4. **Immediately** print/output that array exactly as-is. *NOTHING ELSE AND NO EDITING*
  mode: local
  framework: openai
  tools:
    - java-fetcher
  code: |
    import requests

    def get_java_file_urls(owner: str, repo: str, branch: str = "main") -> list[str]:
        """
        Retrieve raw.githubusercontent.com URLs for all .java files in a GitHub repo
        by using the Git Trees API with recursion.

        :param owner: GitHub org/user name (e.g., "Mastercard")
        :param repo: Repository name (e.g., "client-encryption-java")
        :param branch: Branch name (default: "main")
        :param token: GitHub Personal Access Token (optional for private repos or rate limiting)
        :return: List of raw.githubusercontent.com URLs for each .java file
        """
        
        tree_api_url = f"https://api.github.com/repos/{owner}/{repo}/git/trees/{branch}?recursive=1"
    
        response = requests.get(tree_api_url)
        response.raise_for_status()
        tree_data = response.json().get("tree", [])
        
        java_urls = []
        for entry in tree_data:
            if entry.get("type") == "blob" and entry.get("path", "").endswith(".java"):
                raw_url = f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{entry['path']}"
                java_urls.append(raw_url)
        
        return java_urls

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: identify post-quantum
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    given a single java file, find every use of post-quantum-vulnerable crypto algorithms and output its line number, the function name and the full source line
  instructions: |
    You are a code-analysis assistant.  
    INPUT: a Java source file as plain text.  
    TASK: Identify every use of post-quantum-vulnerable cryptography. That includes:
      1. **Explicit algorithms** in strings: e.g. “AES”, “RSA”, “DSA”, “3DES”, “SHA-1”, etc.
      2. **API calls or imports** from Java’s crypto packages: any reference to 
        - `javax.crypto.*` (e.g. `Cipher.getInstance`, `Mac.getInstance`)  
        - `java.security.*` (e.g. `KeyPairGenerator.getInstance`, `MessageDigest.getInstance`)  
        - Third-party libs like BouncyCastle (`org.bouncycastle.*`)  
      3. **Cryptographic classes** usage: e.g. `KeyPairGenerator`, `Certificate`, `SecretKeySpec`, `Signature`, etc.

    For **each** occurrence, produce an object with:
      • `algorithm`: the exact string or class/API name (e.g. `"AES/CBC/PKCS5Padding"` or `"Cipher.getInstance"`).  
      • `line`: 1-based line number.  
      • `snippet`: the entire source line.

    **REQUIREMENTS**  
    - Output **only** one JSON array of objects (empty `[]` if no matches).  
    - **Never** output `None`, prose, or explanations.  
    - If you’re unsure, **include** the occurrence (safe over silent).

    **EXAMPLE OUTPUT**  
    ```json
    [
      {
        "algorithm": "Cipher.getInstance",
        "line": 27,
        "snippet": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");"
      },
      {
        "algorithm": "KeyPairGenerator.getInstance",
        "line": 54,
        "snippet": "KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");"
      },
      {
        "algorithm": "Certificate",
        "line": 103,
        "snippet": "Certificate cert = loadCertificate(...);"
      }
    ]
  mode: local
  framework: openai
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: raw gh reader
  labels:
    app: cbom.ai
spec:
  model: qwen3:latest
  description: |
    given a github url, fetch its contents directly using the fetch_code tool
  instructions: |
    You are the **File Content Fetcher** agent for CBOM.ai. You will be given a raw github url in this form: "given_url", fetch its contents directly using the fetch_code tool (also known as 'fetch_raw_file_content').

        **Execution Steps:**
          1. **Call**: fetch_code("given_url").
          2. **Return** the `content` string exactly as received—no extra formatting or commentary.

    For more context, the output should just be the content/code of the file located at the passed in github URL, without any additional text or formatting.
  mode: local
  framework: openai
  tools:
    - fetch_code
  code: |
    import requests

    def fetch_raw_file_content(url: str) -> str:
        """
        Fetch the full content of a raw.githubusercontent.com URL using HTTP.

        :param url: Raw file URL (e.g., https://raw.githubusercontent.com/.../AesEncrypter.java)
        :return: The file content as a text string
        """
        response = requests.get(url)
        response.raise_for_status()
        return response.text

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: component creator
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    cbom assembler agent
  instructions: |
    You are the **Component Agent** for CBOM.ai.

    **Input:** A JSON array of objects, each containing:
      - "algorithm" (string)
      - "line" (number)
      - "snippet" (string)

    **Task:** Produce a JSON array of **component objects** in the format below.
    For each unique algorithm value in the input, create one component entry:

      {
        "name": <algorithm>,
        "type": "cryptographic-asset",
        "bom-ref": "<UUID>",
        "evidence": {
          "occurrences": [
            {
              "location": "<file-location-placeholder>",
              "line": <line>,
              "offset": <offset-placeholder>,
              "additionalContext": <snippet>
            },
            ...
          ]
        },
        "cryptoProperties": {
          "assetType": "algorithm",
          "algorithmProperties": {
            "primitive": "<primitive-placeholder>",
            "cryptoFunctions": ["<function-placeholder>"],
            "parameterSetIdentifier": "<param-placeholder>"
          }
        }
      }

    **Notes:**
    - Use a unique UUID string for each "bom-ref".
    - Any missing data (e.g., file location, offset, primitive) may be left as placeholders.
    - Output **only** the JSON array (no extra text), formatted in a code block.
    - If input is empty (`[]`), output `[]`.
  mode: local
  framework: openai
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: BOM Assembler
  labels:
    app: cbom.ai
spec:
  model: llama3.2:3b
  description: |
    cbom assembler agent
  instructions: |
    You are the **BOM Assembler** agent for CBOM.ai.

    **Input:** A JSON array of CycloneDX-style component objects.

    **Task:** Produce a complete CycloneDX BOM JSON document with a hardcoded header and the provided components. Use the following template, substituting in the input array:

    ```json
    {
      "version": 1,
      "metadata": {
        "tools": {"services": [{
          "name": "Sonar Cryptography Plugin",
          "version": "1.3.2",
          "provider": {"name": "IBM"}
        }]},
        "timestamp":  "placeholder",
        "properties": [
          {"name":"git-url",    "value":"https://github.com/Mastercard/client-encryption-java"},
          {"name":"git-branch", "value":"main"},
          {"name":"commit",     "value":"placeholder"},
          {"name":"purl",       "value":"pkg:github/Mastercard/client-encryption-java"}
        ]
      },
      "$schema": "https://raw.githubusercontent.com/CycloneDX/specification/1.6/schema/bom-1.6.schema.json",
      "bomFormat": "CycloneDX",
      "components": {{components}},
      "specVersion": "1.6",
      "dependencies": [],
      "serialNumber": "placeholder"
    }
    ```

    - Insert the input array in place of `{{components}}`.
    - Leave dependencies as an empty array for now.
    - You do not need to replaced "placeholder" for now, you can just keep it as is.
    - **Output only** the final JSON document in a code block, no extra text.
    - **NOTE**: the header is always the same, so you can directly hardcode it in your output.
  mode: local
  framework: openai
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: selector agent
  labels: 
    app: test-example
    custom_agent: prompt_agent
spec:
  model: dummy
  framework: custom
  mode: remote
  description: selecting the first element from the list of URLs
  instructions: "https://raw.githubusercontent.com/Mastercard/client-encryption-java/main/src/main/java/com/mastercard/developer/encryption/EncryptionConfig.java"
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: cbom patcher
  labels:
    app: cbom.ai
spec:
  model: llama3.2:3b
  description: |
    CBOM patcher agent
  instructions: |
    You are a git patcher Agent, and can help developers apply code patches to their github repos and
    open pull requests.
    You must have a valid github api token to do patching.
    If you do not have access to one, please ask the user to provide. Remind them to
    only use a short lived token with access restricted to the correct repo for demo purposes.
    You will also need a valid email. You can set this to 'cbom-ai@research.ibm.com' if not specified
    You will also need a valid name. You can set this to 'CBOM-AI remediation' if not specified
    When you are provided with a file containing a patch, you must read it before calling the patcher tool. The patch is a context diff with an email header. It is not in JSON format and must not be treated as json.

    You are the **patcher** agent and can help developers apply code patches to their github repos and
    open pull requests..  
    When you are provided with a file containing a patch, you must read it before calling the patcher tool. The patch is a context diff with an email header. It is not in JSON format and must not be treated as json.
    You can use the 'patcher_tool' to create a github pull request based on the patch
    **IMPORTANT**: After you invoke the `patcher_tool`
    **directly return** its output — exactly character-for-character—and nothing else.  
    Do **not**:
      - Reformat or prettify the list  
      - Edit, Sort, filter, dedupe, or correct paths  
      - Append any commentary  
    **Input:**
      You will be provided with a patchfile. This will contain information about the code change to make.
      You will need to provide the repository to use. You can use 'https://github.com/planetf1/client-encryption-java'
      for this if you do not know the name.
    **Output:**
      The tool should create a pull request and return a text string containing a URL to the
      pull request on github. You should clearly mention this in your final response, inviting the user to
      review and comment on the PR prior to merging
    **Steps:**  
      1. Invoke the tool:  
        ```Python
        patcher_tool(patchfile='text')
        ```
        the string 'text' above should be replaced with the content of the patchfile you receive as input. 
        There is no need to supply any optional parameters 
      3. Receive the tool’s response, a message containing a link to a newly opened Pull Request
    **Example:**
      This is an example of the python code to call the tool:
      ```python
      pr_response = """
      From 94abe5f3b19d11a4d538ef629467a89392e50d2c Mon Sep 17 00:00:00 2001
      From: patcher <patcher@research.ibm.com>
      Date: Mon, 2 Dec 2024 11:46:35 +0000
      Subject: [PATCH] Bee patched!
      ---
       .../java/src/crypto.java    | 2 +-
       1 file changed, 1 insertion(+), 1 deletion(-)
      diff --git a/src/main/java/src/crypto.java b/src/main/crypto.java
      index 31cb738..bc98c36 100644
      --- a/src/main/java/src/crypto.java
      +++ b/src/main/java/src/crypto.java
      @@ -20,7 +20,7 @@ public class AESGCM {
      public static byte[] decrypt(Key cek, JweObject object) throws GeneralSecurityException {
        byte[] aad = object.getRawHeader().getBytes(StandardCharsets.US_ASCII);
      - gc gcmSpec = new GCMParameterSpec(128, EncodingUtils.base64Decode(object.getIv()));
      + gc gcmSpec = new GCMParameterSpec(256, EncodingUtils.base64Decode(object.getIv()));
        a = b
        return cipher(cek, gcmSpec, bytes, aad, Cipher.DECRYPT_MODE);
      }
      --
      2.45.2
      """
      ```
      'pr_response' will contain information about the pull request - you should print this with 
      some explanatory text
  mode: local
  framework: openai
  tools:
    - LLM
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: cbom fixer
  labels:
    app: cbom.ai
spec:
  model: llama3.2:3b
  description: |
    CBOM fixer agent
  instructions: |
    You are the **fixer** agent.  
    **IMPORTANT**: After you invoke the `fixer_tool`
    **directly return** its output — exactly character-for-character—and nothing else.  
    Do **not**:
      - Reformat or prettify the list  
      - Edit, Sort, filter, dedupe, or correct paths  
      - Append any commentary  
    **Input:**
      You will be provided with a json file of findings. This will contain information about 
        * the github repository of the source code
        * for each finding
          * The name of the source file (including directory)
          * a full URL to the file
          * the location in the file where a problem was detected
          * the algorithm currently in usage
          * a remediation label which can be used to decide which tool to get to fix the code
    **Steps:**  
      1. Invoke the tool:  
        ```Python
        fixer_tool(reports='json')
        ```
        the string 'json' above should be replaced with the content of the json file you receive as input. 
        There is no need to supply any optional parameters 
      3. Receive the tool’s response, a string representing a unix patch file
      4. **Immediately** print/output that string exactly as-is. *NOTHING ELSE AND NO EDITING*
    **Example:**
      This is an example of the python code to call the tool:
      ```python
      report = {
        {
          "repository": "https://github.com/myorg/crypto-repo",
          "findings": [
            {
              "algorithm": "AES128-CBC-PKCS5",
              "remediation": "KEYLEN01",
              "filename": "src/main/java/crypto.java",
              "URL": "https://raw.githubusercontent.com/myorg/crypto-repo/main/src/main/java/crypto.java",
            "linenumber": 276
            }
          ]
        },
        patch: str=fixer_tool(report)
        ```
      The output from the fixer_tool will then look something like this:
      ```text
      From 94abe5f3b19d11a4d538ef629467a89392e50d2c Mon Sep 17 00:00:00 2001
      From: patcher <patcher@research.ibm.com>
      Date: Mon, 2 Dec 2024 11:46:35 +0000
      Subject: [PATCH] Bee patched!
      ---
       .../java/src/crypto.java    | 2 +-
       1 file changed, 1 insertion(+), 1 deletion(-)
      diff --git a/src/main/java/src/crypto.java b/src/main/crypto.java
      index 31cb738..bc98c36 100644
      --- a/src/main/java/src/crypto.java
      +++ b/src/main/java/src/crypto.java
      @@ -20,7 +20,7 @@ public class AESGCM {
      public static byte[] decrypt(Key cek, JweObject object) throws GeneralSecurityException {
        byte[] aad = object.getRawHeader().getBytes(StandardCharsets.US_ASCII);
      - gc gcmSpec = new GCMParameterSpec(128, EncodingUtils.base64Decode(object.getIv()));
      + gc gcmSpec = new GCMParameterSpec(256, EncodingUtils.base64Decode(object.getIv()));
        a = b
        return cipher(cek, gcmSpec, bytes, aad, Cipher.DECRYPT_MODE);
      }
      --
      2.45.2
      ```
  mode: local
  framework: openai
  tools:
    - LLM
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: cbom finder
  labels:
    app: cbom.ai
spec:
  model: llama3.2:3b
  description: |
    CBOM finder agent
  instructions: |
    You are a software agent that helps developers to find problems in their use of cryptographic algorithms, particularly in relation to it's quantum safety.
    You will be be provided with a cbom file in json format which you can read and parse the contents to find out about the use of cryptographic algorithms within
    source code. These are identified as a 'cryptographic-asset'. This CBOM will have been generated from a scan of the developer's source code.
    Although some regard 128 bit AES encryption as safe against quantum attacks, to be extra safe we should assume 128 bit AES should be upgraded to 256 bit. Use the name 'KEYLEN01' as the name of the remediation.
    Although RSA is not quantum safe, for the purpose of this demo we should not report it (unless asked).
    The CBOM can identify which algorithms are used, and identify where in the original source they are used (evidence).
    When reporting, output should be in a findings file in json format and should include the following keys:
    * repository - this is the URL to the github repository
      Within this create a list of instances representing each finding:
      * algorithm - this should give the name of the algorithm as found in the cbom
      * remediation - include the ID of the suggested remediation
      * filename - the source code file (including full directory path) marked as 'location' in the cbom. This is a place in the file. It is not a geographical location.
      * URL - provides a link to the raw file on github, in the default branch (you may need to prompt for the github repository if it is not provided)
      * linenumber - found in the cbom as offset
    Since we are testing/demonstrating, you should assume a fork exists under the 'planetf1' userid on github, and use this for any URLs.
    **Example Output:**
    ```json
    {
      {
        "repository": "https://github.com/myorg/crypto-repo",
        "findings": [
          {
            "algorithm": "AES128-CBC-PKCS5",
            "remediation": "KEYLEN01",
            "filename": "src/main/java/crypto.java",
            "URL": "https://raw.githubusercontent.com/myorg/crypto-repo/main/src/main/java/crypto.java",
          "linenumber": 276
          }
        ]
      },
    ```
  mode: local
  framework: openai
  tools:
    - LLM
---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: cbom injector
  labels: 
    app: test-example
    custom_agent: prompt_agent
spec:
  model: dummy
  framework: custom
  mode: remote
  description: selecting the first element from the list of URLs
  instructions: |
    Am I using any unsafe cryptography in my application? The CBOM is provided below:
    ```json
    {
      "version": 1,
      "metadata": {
          "tools": {
              "services": [
                  {
                      "name": "Sonar Cryptography Plugin",
                      "version": "1.3.2",
                      "provider": {
                          "name": "IBM"
                      }
                  }
              ]
          },
          "timestamp": "2024-10-16T11:10:32Z",
          "properties": [
              {
                  "name": "git-url",
                  "value": "https://github.com/Mastercard/client-encryption-java"
              },
              {
                  "name": "git-branch",
                  "value": "main"
              },
              {
                  "name": "commit",
                  "value": "7d36218971b0e058fc9357c7296cd44f7c49ba04"
              },
              {
                  "name": "purl",
                  "value": "pkg:github/Mastercard/client-encryption-java"
              }
          ]
      },
      "$schema": "https://raw.githubusercontent.com/CycloneDX/specification/1.6/schema/bom-1.6.schema.json",
      "bomFormat": "CycloneDX",
      "components": [
          {
              "name": "SHA256",
              "type": "cryptographic-asset",
              "bom-ref": "2e45d5a5-0de3-4d5b-86ec-45e8bb1dcd79",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 51,
                          "offset": 38,
                          "location": "src/main/java/com/mastercard/developer/encryption/EncryptionConfigBuilder.  java",
                          "additionalContext": "java.security.MessageDigest#getInstance(Ljava/lang/String;)Ljava/  security/MessageDigest;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "oid": "2.16.840.1.101.3.4.2.1",
                  "assetType": "algorithm",
                  "algorithmProperties": {
                      "primitive": "hash",
                      "cryptoFunctions": [
                          "digest"
                      ],
                      "parameterSetIdentifier": "256"
                  }
              }
          },
          {
              "name": "RSA",
              "type": "cryptographic-asset",
              "bom-ref": "1e274762-bc23-4ffc-92d8-7a5387bdce38",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 27,
                          "offset": 28,
                          "location": "src/main/java/com/mastercard/developer/encryption/rsa/RSA.java",
                          "additionalContext": "javax.crypto.Cipher#getInstance(Ljava/lang/String;)Ljavax/crypto/  Cipher;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "oid": "1.2.840.113549.1.1.1",
                  "assetType": "algorithm",
                  "algorithmProperties": {
                      "mode": "ecb",
                      "padding": "oaep",
                      "primitive": "pke",
                      "cryptoFunctions": [
                          "encapsulate"
                      ]
                  }
              }
          },
          {
              "name": "key@39ce22ed-5bae-4ef7-afd0-cf22fa57b895",
              "type": "cryptographic-asset",
              "bom-ref": "39ce22ed-5bae-4ef7-afd0-cf22fa57b895",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 99,
                          "offset": 32,
                          "location": "src/main/java/com/mastercard/developer/utils/EncryptionUtils.java",
                          "additionalContext": "java.security.KeyFactory#getInstance(Ljava/lang/String;)Ljava/  security/KeyFactory;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "assetType": "related-crypto-material",
                  "relatedCryptoMaterialProperties": {
                      "type": "secret-key"
                  }
              }
          },
          {
              "name": "secret-key@e37acf62-a0d1-4b36-9acc-48d0da784b68",
              "type": "cryptographic-asset",
              "bom-ref": "e37acf62-a0d1-4b36-9acc-48d0da784b68",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 32,
                          "offset": 15,
                          "location": "src/main/java/com/mastercard/developer/encryption/aes/AESEncryption.java",
                          "additionalContext": "javax.crypto.spec.SecretKeySpec#<init>([BLjava/lang/String;)V"
                      }
                  ]
              },
              "cryptoProperties": {
                  "assetType": "related-crypto-material",
                  "relatedCryptoMaterialProperties": {
                      "type": "secret-key"
                  }
              }
          },
          {
              "name": "AES128-CBC-PKCS5",
              "type": "cryptographic-asset",
              "bom-ref": "033f9204-3ac0-438c-a7a5-1b99fcc6bf4d",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 31,
                          "offset": 24,
                          "location": "src/main/java/com/mastercard/developer/encryption/aes/AESCBC.java",
                          "additionalContext": "javax.crypto.Cipher#getInstance(Ljava/lang/String;)Ljavax/crypto/  Cipher;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "oid": "2.16.840.1.101.3.4.1",
                  "assetType": "algorithm",
                  "algorithmProperties": {
                      "mode": "cbc",
                      "padding": "pkcs5",
                      "primitive": "block-cipher",
                      "parameterSetIdentifier": "128"
                  }
              }
          },
          {
              "name": "secret-key@17386b13-cfa8-4f3b-a3a9-36409784fd41",
              "type": "cryptographic-asset",
              "bom-ref": "17386b13-cfa8-4f3b-a3a9-36409784fd41",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 74,
                          "offset": 31,
                          "location": "src/main/java/com/mastercard/developer/encryption/jwe/JweObject.java",
                          "additionalContext": "javax.crypto.spec.SecretKeySpec#<init>([BLjava/lang/String;)V"
                      }
                  ]
              },
              "cryptoProperties": {
                  "assetType": "related-crypto-material",
                  "relatedCryptoMaterialProperties": {
                      "type": "secret-key"
                  }
              }
          },
          {
              "name": "AES128",
              "type": "cryptographic-asset",
              "bom-ref": "2594f4c1-0efc-4498-9e08-aacc37c851ff",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 32,
                          "offset": 15,
                          "location": "src/main/java/com/mastercard/developer/encryption/aes/AESEncryption.java",
                          "additionalContext": "javax.crypto.spec.SecretKeySpec#<init>([BLjava/lang/String;)V"
                      },
                      {
                          "line": 74,
                          "offset": 31,
                          "location": "src/main/java/com/mastercard/developer/encryption/jwe/JweObject.java",
                          "additionalContext": "javax.crypto.spec.SecretKeySpec#<init>([BLjava/lang/String;)V"
                      },
                      {
                          "line": 112,
                          "offset": 37,
                          "location": "src/main/java/com/mastercard/developer/encryption/FieldLevelEncryptionParams.  java",
                          "additionalContext": "javax.crypto.KeyGenerator#getInstance(Ljava/lang/String;)Ljavax/  crypto/KeyGenerator;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "oid": "2.16.840.1.101.3.4.1",
                  "assetType": "algorithm",
                  "algorithmProperties": {
                      "primitive": "block-cipher",
                      "cryptoFunctions": [
                          "keygen"
                      ],
                      "parameterSetIdentifier": "128"
                  }
              }
          },
          {
              "name": "RSA-OAEP",
              "type": "cryptographic-asset",
              "bom-ref": "b2a90846-a3bf-4f36-b62d-fa08ce93d115",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 27,
                          "offset": 28,
                          "location": "src/main/java/com/mastercard/developer/encryption/rsa/RSA.java",
                          "additionalContext": "javax.crypto.Cipher#getInstance(Ljava/lang/String;)Ljavax/crypto/  Cipher;"
                      },
                      {
                          "line": 42,
                          "offset": 28,
                          "location": "src/main/java/com/mastercard/developer/encryption/rsa/RSA.java",
                          "additionalContext": "javax.crypto.Cipher#getInstance(Ljava/lang/String;)Ljavax/crypto/  Cipher;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "oid": "1.2.840.113549.1.1.7",
                  "assetType": "algorithm",
                  "algorithmProperties": {
                      "mode": "ecb",
                      "padding": "oaep",
                      "primitive": "pke",
                      "cryptoFunctions": [
                          "encapsulate"
                      ],
                      "parameterSetIdentifier": "2048"
                  }
              }
          },
          {
              "name": "secret-key@57627475-afee-4c55-b393-dd6d4e7f7752",
              "type": "cryptographic-asset",
              "bom-ref": "57627475-afee-4c55-b393-dd6d4e7f7752",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 112,
                          "offset": 37,
                          "location": "src/main/java/com/mastercard/developer/encryption/FieldLevelEncryptionParams.  java",
                          "additionalContext": "javax.crypto.KeyGenerator#getInstance(Ljava/lang/String;)Ljavax/  crypto/KeyGenerator;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "assetType": "related-crypto-material",
                  "relatedCryptoMaterialProperties": {
                      "type": "secret-key"
                  }
              }
          },
          {
              "name": "AES128-GCM",
              "type": "cryptographic-asset",
              "bom-ref": "c93f1b93-4e10-46c1-bf65-2c213b261b4a",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 29,
                          "offset": 24,
                          "location": "src/main/java/com/mastercard/developer/encryption/aes/AESGCM.java",
                          "additionalContext": "javax.crypto.Cipher#getInstance(Ljava/lang/String;)Ljavax/crypto/  Cipher;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "oid": "2.16.840.1.101.3.4.1",
                  "assetType": "algorithm",
                  "algorithmProperties": {
                      "mode": "gcm",
                      "primitive": "ae",
                      "cryptoFunctions": [
                          "decrypt"
                      ],
                      "parameterSetIdentifier": "128"
                  }
              }
          },
          {
              "name": "RSA-2048",
              "type": "cryptographic-asset",
              "bom-ref": "f9432f83-6661-4c16-aac2-f923b4f34b21",
              "evidence": {
                  "occurrences": [
                      {
                          "line": 99,
                          "offset": 32,
                          "location": "src/main/java/com/mastercard/developer/utils/EncryptionUtils.java",
                          "additionalContext": "java.security.KeyFactory#getInstance(Ljava/lang/String;)Ljava/  security/KeyFactory;"
                      }
                  ]
              },
              "cryptoProperties": {
                  "oid": "1.2.840.113549.1.1.1",
                  "assetType": "algorithm",
                  "algorithmProperties": {
                      "primitive": "pke",
                      "cryptoFunctions": [
                          "keygen"
                      ],
                      "parameterSetIdentifier": "2048"
                  }
              }
          }
      ],
      "specVersion": "1.6",
      "dependencies": [
          {
              "ref": "57627475-afee-4c55-b393-dd6d4e7f7752",
              "dependsOn": [
                  "2594f4c1-0efc-4498-9e08-aacc37c851ff"
              ]
          },
          {
              "ref": "39ce22ed-5bae-4ef7-afd0-cf22fa57b895",
              "dependsOn": [
                  "f9432f83-6661-4c16-aac2-f923b4f34b21"
              ]
          },
          {
              "ref": "e37acf62-a0d1-4b36-9acc-48d0da784b68",
              "dependsOn": [
                  "2594f4c1-0efc-4498-9e08-aacc37c851ff"
              ]
          },
          {
              "ref": "17386b13-cfa8-4f3b-a3a9-36409784fd41",
              "dependsOn": [
                  "2594f4c1-0efc-4498-9e08-aacc37c851ff"
              ]
          }
      ],
      "serialNumber": "urn:uuid:64d64b82-d93f-4a4c-85ab-dc310800f00c"
    }
    ```