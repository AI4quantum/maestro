apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: git fetcher
  labels:
    app: cbom.ai
spec:
  model: qwen3:latest
  description: |
    output the java files given a repository
  instructions: |
    You are the **Java Fetcher** agent.  
    **IMPORTANT**: After you invoke the `java-fetcher` tool, you MUST **directly return** its output — exactly character-for-character—and nothing else.  
    Do **not**:
      - Reformat or prettify the list  
      - Edit, Sort, filter, dedupe, or correct paths  
      - Append any commentary  
    **Steps:**  
      1. Invoke the tool:  
        ```Python
        java-fetcher(owner="given owner input", repo="given repo input")
        ```  
      3. Receive the tool’s response, an array of URLs: ['url1', 'url2', 'url3', etc ...]
      4. **Immediately** print/output that array exactly as-is. *NOTHING ELSE AND NO EDITING*
  mode: remote
  tools:
    - java-fetcher
  code: |
    import requests

    def get_java_file_urls(owner: str, repo: str, branch: str = "main") -> list[str]:
        """
        Retrieve raw.githubusercontent.com URLs for all .java files in a GitHub repo
        by using the Git Trees API with recursion.

        :param owner: GitHub org/user name (e.g., "Mastercard")
        :param repo: Repository name (e.g., "client-encryption-java")
        :param branch: Branch name (default: "main")
        :param token: GitHub Personal Access Token (optional for private repos or rate limiting)
        :return: List of raw.githubusercontent.com URLs for each .java file
        """
        
        tree_api_url = f"https://api.github.com/repos/{owner}/{repo}/git/trees/{branch}?recursive=1"
    
        response = requests.get(tree_api_url)
        response.raise_for_status()
        tree_data = response.json().get("tree", [])
        
        java_urls = []
        for entry in tree_data:
            if entry.get("type") == "blob" and entry.get("path", "").endswith(".java"):
                raw_url = f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{entry['path']}"
                java_urls.append(raw_url)
        
        return java_urls

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: identify post-quantum
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    given a single java file, find every use of post-quantum-vulnerable crypto algorithms and output its line number, the function name and the full source line
  instructions: |
    You are a code-analysis assistant.  
    INPUT: a Java source file as plain text.  
    TASK: Identify every use of post-quantum-vulnerable cryptography. That includes:
      1. **Explicit algorithms** in strings: e.g. “AES”, “RSA”, “DSA”, “3DES”, “SHA-1”, etc.
      2. **API calls or imports** from Java’s crypto packages: any reference to 
        - `javax.crypto.*` (e.g. `Cipher.getInstance`, `Mac.getInstance`)  
        - `java.security.*` (e.g. `KeyPairGenerator.getInstance`, `MessageDigest.getInstance`)  
        - Third-party libs like BouncyCastle (`org.bouncycastle.*`)  
      3. **Cryptographic classes** usage: e.g. `KeyPairGenerator`, `Certificate`, `SecretKeySpec`, `Signature`, etc.

    For **each** occurrence, produce an object with:
      • `algorithm`: the exact string or class/API name (e.g. `"AES/CBC/PKCS5Padding"` or `"Cipher.getInstance"`).  
      • `line`: 1-based line number.  
      • `snippet`: the entire source line.

    **REQUIREMENTS**  
    - Output **only** one JSON array of objects (empty `[]` if no matches).  
    - **Never** output `None`, prose, or explanations.  
    - If you’re unsure, **include** the occurrence (safe over silent).

    **EXAMPLE OUTPUT**  
    ```json
    [
      {
        "algorithm": "Cipher.getInstance",
        "line": 27,
        "snippet": "Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");"
      },
      {
        "algorithm": "KeyPairGenerator.getInstance",
        "line": 54,
        "snippet": "KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");"
      },
      {
        "algorithm": "Certificate",
        "line": 103,
        "snippet": "Certificate cert = loadCertificate(...);"
      }
    ]
  mode: remote
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: raw gh reader
  labels:
    app: cbom.ai
spec:
  model: qwen3:latest
  description: |
    given a github url, fetch its contents directly using the fetch_code tool
  instructions: |
    You are the **File Content Fetcher** agent for CBOM.ai. You will be given a raw github url in this form: "given_url", fetch its contents directly using the fetch_code tool.

        **Execution Steps:**
          1. **Call**: fetch_code("given_url").
          2. **Return** the `content` string exactly as received—no extra formatting or commentary.

    For more context, the output should just be the content/code of the file located at the passed in github URL, without any additional text or formatting.
  mode: remote
  tools:
    - fetch_code
  code: |
    import requests

    def fetch_raw_file_content(url: str) -> str:
        """
        Fetch the full content of a raw.githubusercontent.com URL using HTTP.

        :param url: Raw file URL (e.g., https://raw.githubusercontent.com/.../AesEncrypter.java)
        :return: The file content as a text string
        """
        response = requests.get(url)
        response.raise_for_status()
        return response.text

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: component creator
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    cbom assembler agent
  instructions: |
    You are the **Component Agent** for CBOM.ai.

    **Input:** A JSON array of objects, each containing:
      - "algorithm" (string)
      - "line" (number)
      - "snippet" (string)

    **Task:** Produce a JSON array of **component objects** in the format below.
    For each unique algorithm value in the input, create one component entry:

      {
        "name": <algorithm>,
        "type": "cryptographic-asset",
        "bom-ref": "<UUID>",
        "evidence": {
          "occurrences": [
            {
              "location": "<file-location-placeholder>",
              "line": <line>,
              "offset": <offset-placeholder>,
              "additionalContext": <snippet>
            },
            ...
          ]
        },
        "cryptoProperties": {
          "assetType": "algorithm",
          "algorithmProperties": {
            "primitive": "<primitive-placeholder>",
            "cryptoFunctions": ["<function-placeholder>"],
            "parameterSetIdentifier": "<param-placeholder>"
          }
        }
      }

    **Notes:**
    - Use a unique UUID string for each "bom-ref".
    - Any missing data (e.g., file location, offset, primitive) may be left as placeholders.
    - Output **only** the JSON array (no extra text), formatted in a code block.
    - If input is empty (`[]`), output `[]`.
  mode: remote
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: BOM Assembler
  labels:
    app: cbom.ai
spec:
  model: granite3.2:latest
  description: |
    cbom assembler agent
  instructions: |
    You are the **BOM Assembler** agent for CBOM.ai.

    **Input:** A JSON array of CycloneDX-style component objects.

    **Task:** Produce a complete CycloneDX BOM JSON document with a hardcoded header and the provided components. Use the following template, substituting in the input array:

    ```json
    {
      "version": 1,
      "metadata": {
        "tools": {"services": [{
          "name": "Sonar Cryptography Plugin",
          "version": "1.3.2",
          "provider": {"name": "IBM"}
        }]},
        "timestamp":  "placeholder",
        "properties": [
          {"name":"git-url",    "value":"https://github.com/Mastercard/client-encryption-java"},
          {"name":"git-branch", "value":"main"},
          {"name":"commit",     "value":"placeholder"},
          {"name":"purl",       "value":"pkg:github/Mastercard/client-encryption-java"}
        ]
      },
      "$schema": "https://raw.githubusercontent.com/CycloneDX/specification/1.6/schema/bom-1.6.schema.json",
      "bomFormat": "CycloneDX",
      "components": {{components}},
      "specVersion": "1.6",
      "dependencies": [],
      "serialNumber": "placeholder"
    }
    ```

    - Insert the input array in place of `{{components}}`.
    - Leave dependencies as an empty array for now.
    - You do not need to replaced "placeholder" for now, you can just keep it as is.
    - **Output only** the final JSON document in a code block, no extra text.
    - **NOTE**: the header is always the same, so you can directly hardcode it in your output.
  mode: remote
  tools:
    - LLM

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: selector agent
  labels: 
    app: test-example
    custom_agent: prompt_agent
spec:
  model: dummy
  framework: custom
  mode: remote
  description: selecting the first element from the list of URLs
  instructions: "https://raw.githubusercontent.com/Mastercard/client-encryption-java/main/src/main/java/com/mastercard/developer/encryption/EncryptionConfig.java"