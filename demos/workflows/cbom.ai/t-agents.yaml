apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: fixer-agent
  labels:
    app: cbom-demo
spec:
  framework: code
  mode: local
  description: Generates a git patch based on CBOM
  code: |
    import os
    import json
    import re
    import sys

    def find_cbom_base():
        cur = os.getcwd()
        while True:
            candidate = os.path.join(cur, "demos", "workflows", "cbom.ai", "example-cbom.json")
            if os.path.isfile(candidate):
                return os.path.dirname(candidate)
            parent = os.path.dirname(cur)
            if parent == cur:
                raise FileNotFoundError("Could not locate cbom.ai/example-cbom.json")
            cur = parent

    base_dir = find_cbom_base()
    cbom_path = os.path.join(base_dir, "example-cbom.json")
    workspace_dir = os.path.join(base_dir, "workspace")
    patch_path = os.path.join(workspace_dir, "patch")

    with open(cbom_path) as f:
        cbom = json.load(f)

    github_token = os.getenv("GITHUB_TOKEN")
    email = "patcher@cbom.ai"
    name = "Fixer Agent"

    props = {p["name"]: p["value"] for p in cbom["metadata"]["properties"]}
    repo_url = props["git-url"]
    match = re.search(r"github\.com\/([^\/]+)\/([^\/]+)", repo_url)
    org, repo = match.group(1), match.group(2)

    findings = []
    for component in cbom.get("components", []):
        algo = component.get("cryptoProperties", {}).get("algorithmProperties", {})
        if algo.get("parameterSetIdentifier") == "128":
            for occ in component.get("evidence", {}).get("occurrences", []):
                findings.append({"filename": occ["location"], "remediation": "KEYLEN01"})

    os.system(f"rm -fr {workspace_dir} && mkdir -p {workspace_dir} && cd {workspace_dir} && git clone https://{github_token}@github.com/{org}/{repo}.git repo && cd repo && git checkout -b staging")
    os.system(f"cd {workspace_dir}/repo && git config user.email {email} && git config user.name {name} >../out 2>&1")

    for f in findings:
        filename = f["filename"]
        sed_flag = "-i ''" if sys.platform == "darwin" else "-i"
        os.system(f"cd {workspace_dir}/repo && sed {sed_flag} 's/128/256/g' {filename}")

    os.system(f"cd {workspace_dir}/repo && git add . > ../out 2>&1")
    os.system(f"cd {workspace_dir}/repo && git commit -m 'CBOM patch applied' > ../out 2>&1")
    os.system(f"cd {workspace_dir}/repo && git format-patch --stdout -1 HEAD > {patch_path} 2>&1")

    with open(patch_path, "r") as f:
        patch = f.read()

    os.system(f"cd {workspace_dir} && rm -fr repo")
    print("✅ Patch updated successfully.")


---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: patcher-agent
  labels:
    app: cbom-demo
spec:
  framework: code
  mode: local
  description: Apply patch and create GitHub PR
  code: |
    import os
    import random
    import re

    cur = os.getcwd()
    while True:
        candidate = os.path.join(cur, "demos", "workflows", "cbom.ai", "example-cbom.json")
        if os.path.isfile(candidate):
            base_dir = os.path.dirname(candidate)
            break
        parent = os.path.dirname(cur)
        if parent == cur:
            raise FileNotFoundError("Could not locate cbom.ai/example-cbom.json")
        cur = parent

    workspace_dir = os.path.join(base_dir, "workspace")
    patch_path = os.path.join(workspace_dir, "patch")

    with open(patch_path, "r") as f:
        patch = f.read()

    repo_url = "https://github.com/george-lhj/client-encryption-java"
    github_token = os.getenv("GITHUB_TOKEN")
    email = "patcher@cbom.ai"
    name = "Patcher Bot"
    match = re.search(r"github\.com\/([^\/]+)\/([^\/]+)", repo_url)
    if not match:
        raise ValueError(f"Could not parse org/repo from URL: {repo_url}")
    org, repo = match.group(1), match.group(2)
    repobase = f"{org}/{repo}"
    branch = f"remediation_{random.randint(1000, 9999)}"

    os.system(f"rm -fr {workspace_dir} && mkdir -p {workspace_dir} && cd {workspace_dir} && git clone https://{github_token}@github.com/{org}/{repo}.git repo && cd repo && git checkout -b {branch}")
    os.system(f"cd {workspace_dir}/repo && git config user.email {email} && git config user.name {name}")

    patchfile_path = os.path.join(workspace_dir, "patchfile")
    with open(patchfile_path, "w") as f:
        f.write(patch)

    os.system(f"cd {workspace_dir}/repo && git am < ../patchfile")
    os.system(f"cd {workspace_dir}/repo && git push --force --set-upstream origin {branch}")
    os.environ["GH_TOKEN"] = github_token
    os.system(f"cd {workspace_dir}/repo && gh repo set-default {repobase}")
    os.system(f"cd {workspace_dir}/repo && gh pr create --title 'CBOM Fix' --body 'Auto-applied fix from patch' --base main")

    os.system(f"cd {workspace_dir} && rm -fr repo")
    print(f"✅ Patch applied and PR created on branch: {branch}")
