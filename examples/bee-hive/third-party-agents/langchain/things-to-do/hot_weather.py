#!/usr/bin/env python
"""
This script defines a hot weather agent that uses the LangChain framework to find activities to do in hot weather.

Dependencies:
- langchain
- langchain_ollama
- langchain_core
- langchain_community
- duckduckgo-search

Usage:
- Ensure ollama is available on localhost:11434 and the llama3.1 model is available.
- Run the script to get a list of 5 activities to do in hot weather in San Francisco.
"""

import os
from langchain_core.prompts.prompt import PromptTemplate
from langchain_core.runnables.base import Runnable
from langchain.agents import AgentExecutor, create_react_agent, Tool
from langchain_ollama.chat_models import ChatOllama
from langchain_community.tools import DuckDuckGoSearchRun

class HotWeatherAgent:
    """
    Defines a class to manage an agent that finds activities to do in hot weather.
    """

    # Some tools are already known  -in which case ref by name and
    # 'from langchain_community.agent_toolkits.load_tools import load_tools'
    search = DuckDuckGoSearchRun()
    tools = [
        Tool(
            name = "DuckDuckGo Search",
            func=search.run,
            description="useful for when you need to answer questions about current events"
        )
    ]
    # Assume llama3.1 (running locally given env above)
    os.environ["LLAMAFILE_SERVER_BASE_URL"] = "http://localhost:11434"
    llm = ChatOllama(model="granite3.1-dense:8b", tools=tools)

    agent_executor: Runnable

    def __init__(self) -> None:
        """
        Initializes the HotWeatherAgent class with the specified LLM and tools.
        """

        # this is a prompt template which many examples use - but we could explicitly define our own if needed
        # In this case it's using a react style approach which iterates to get a good result
        prompt: PromptTemplate = PromptTemplate.from_template("""
        Answer the following questions as best you can. Make it clear when you have a Final Answer, 
        
        You have access to the following tools:
        {tools}

        Use the following format:

        Question: the input question you must answer
        Thought: you should always think about what to do
        Action: the action to take, should be one of [{tool_names}]
        Action Input: the input to the action
        Observation: the result of the action
        ... (this Thought/Action/Action Input/Observation can repeat 3 times)
        Final Answer: the final answer to the original input question

        These keywords must never be translated and transformed:
            - Action:
            - Thought:
            - Action Input:
            - Observation:
            - Final Answer:
            - Question:
        
        because they are part of the thinking process instead of the output.
        
        If a Final Answer is given, do not follow any actions after that.
        
        Begin!

        Question: {input}
        Thought:{agent_scratchpad}
        """)

        # create the agent & executor (not using any memory)
        self.agent = create_react_agent(self.llm, prompt=prompt,tools=self.tools)
        self.agent_executor = AgentExecutor(agent=self.agent, tools=self.tools, verbose=True,handle_parsing_errors=True)

    def run(self, question: str) -> str:
        """
        Runs the agent to find activities to do in hot weather.

        Args:
            question (str): The question to be answered by the agent.

        Returns:
            str: The response generated by the agent.
        """

        response = self.agent_executor.invoke({"input": question})
        if "output" in response:
            return response["output"]
        else:
            return "Error: The response does not contain the expected 'output' key."

# run the agent
if __name__ == "__main__":
    # Sample
    EXAMPLE_QUESTION = "Provide a list of 5 activities to do in the hot weather in San Francisco"
    agent = HotWeatherAgent()
    result = agent.run(EXAMPLE_QUESTION)
    print(result)
