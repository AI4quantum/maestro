{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/AI4quantum/maestro/src/maestro/schemas/agent_schema.json",
  "title": "Maestro Agent",
  "description": "A schema for defining Maestro workflows in YAML or JSON",
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string",
      "description": "API version maestro/v1alpha1"
    },
    "kind": {
      "type": "string",
      "description": "must be Agent"
    },
    "metadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "agent name"
        },
        "labels": {
          "type": "object",
          "description": "agent labels, key: value pairs"
        }
      },
      "required": [
        "name"
      ]
    },
    "spec": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Short human-readable desciption of this agent"
        },
        "model": {
          "type": "string",
          "description": "The LLM model for this agent"
        },
        "framework": {
          "type": "string",
            "description": "The agent framework type. beeai, crewai, openai, remote or mock"
        },
        "mode": {
          "type": "string",
          "description": "The mode of the agent.  remote or local"
        },
        "tools": {
          "type": "array",
          "description": "tool list of the agent",
          "items": {
            "type": "string"
          }
        },
        "instructions": {
          "type": "string",
          "description": "The instruction (context) to pass to this agent"
        },
        "code": {
          "type": "string",
          "description": "The (optional) code defintion for the agent"
        },
        "input": {
          "type": "string",
          "description": "instructions for the agent"
        },
        "output": {
          "type": "string",
          "description": "instructions for the agent"
        },
        "url": {
            "type": "string",
            "description": "The (optional) url to send a request to the agent"
        },
        "model_parameters": {
          "type": "object",
          "description": "Optional model configuration parameters",
          "properties": {
            "max_tokens": {
              "type": "integer",
              "description": "Maximum number of tokens for the model's response",
              "minimum": 1
            },
            "temperature": {
              "type": "number",
              "description": "Controls randomness in the output (0.0 to 2.0)",
              "minimum": 0.0,
              "maximum": 2.0
            },
            "top_k": {
              "type": "integer",
              "description": "Number of top tokens to consider for sampling",
              "minimum": 1
            },
            "top_p": {
              "type": "number",
              "description": "Cumulative probability threshold for token sampling (0.0 to 1.0)",
              "minimum": 0.0,
              "maximum": 1.0
            },
            "frequency_penalty": {
              "type": "number",
              "description": "Penalty for token frequency in the output (-2.0 to 2.0)",
              "minimum": -2.0,
              "maximum": 2.0
            },
            "presence_penalty": {
              "type": "number",
              "description": "Penalty for token presence in the output (-2.0 to 2.0)",
              "minimum": -2.0,
              "maximum": 2.0
            },
            "stop_sequences": {
              "type": "array",
              "description": "Sequences that stop the model's output generation",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
