apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: search_arxiv_agent
  labels:
    project: maestro-demo
spec:
  model: llama3.1
  description: Fetches the k most recent article titles from arXiv on a given topic.
  tools:
    - fetch
  code: |
        import urllib.request

        def fetch_arxiv_titles(topic: str, k: int = 10):
          """Fetches the k most recent article titles from arXiv on a given topic."""
          url = f"http://export.arxiv.org/api/query?search_query=all:{topic}&sortBy=submittedDate&sortOrder=descending&max_results={k}"

          with urllib.request.urlopen(url) as response:
              data = response.read().decode()

          titles = [line.split("<title>")[1].split("</title>")[0] for line in data.split("\n") if "<title>" in line][1:k+1]
          return titles
  instructions: Execute the given query using only the fetch tool provided. In your output, only list out the output the function gave you and nothing else. Example output: ['title1', 'title2', .... ]

---

apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: intermediary
  labels:
    project: maestro-demo
spec:
  model: llama3.1
  description: Combines the output of search agent with prompt of second agent.
  tools:
    - none
  instructions: Output the following text exactly, replacing `{input_list}` with the given list: 'Use filtering tool using these as parameters: fetch_valid_arxiv_titles(titles=title_list), where title_list is: {input_list}' Do not process, explain, or modify the list in any way—just insert it and return the exact text.

---

apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: filter_agent
  labels:
    project: maestro-demo
spec:
  model: llama3.1
  description: Filters and selects the most relevant papers based on abstract similarity to the topic.
  tools:
    - filtering
  code: |
        import urllib.request
        import urllib.parse
        import re

        def fetch_valid_arxiv_titles(titles: list):
            """
            Fetches titles that have an available abstract on ArXiv.

            Args:
                titles (list): List of paper titles.

            Returns:
                list: Titles that have an abstract.
            """
            base_url = "http://export.arxiv.org/api/query?search_query="
            valid_titles = []

            for title in titles:
                search_query = f'all:"{urllib.parse.quote(title)}"'
                url = f"{base_url}{search_query}&max_results=1"
                try:
                    with urllib.request.urlopen(url) as response:
                        data = response.read().decode()
                except Exception as e:
                    continue

                abstract_match = re.search(r"<summary>(.*?)</summary>", data, re.DOTALL)

                if abstract_match:
                    valid_titles.append(title)
                else:
                    print(f"❌ No abstract found: {title}")
            return valid_titles
  instructions: Execute the given query using only the filtering tool provided. In your output, only list out the output the function gave you and nothing else. Example output: ['title1', 'title2', .... ]

---

apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: summary_agent
  labels:
    project: maestro-demo
spec:
  model: llama3.1
  description: Creates a summary of the arXiv paper.
  tools:
    - llm
  instructions: Use the LLM tool to generate a high-level summary for the given input text. Do not include anything related to code, merely provide descriptions, overviews, and an introduction to what is being discussed.
