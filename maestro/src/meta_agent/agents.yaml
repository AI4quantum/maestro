apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: Create Agent YAML
  labels:
    app: meta-agent
spec:
  model: llama3.1
  description: "Create the necessary agents (for weather example in this case), outputting an agent.yaml file that is executable by Maestro"
  instructions: |
                "You are an **AI agent definition generator** specializing in creating `agents.yaml` files.

                - Your job is to define agents **explicitly based on user requests**.
                - Use the `agent_schema` tool to fetch the latest schema from GitHub.
                - Ensure all generated agents conform **strictly** to the schema.
                - Each agent should have:
                  - `name`
                  - `model`
                  - `instructions`
                  - Any required `tools`
                - If the request includes **specific tools**, include them in the agent definition.
                - The `instructions` should be the context or role that the agent should take, and you can write it as seen fit.
                - The output should be a **fully-formed `agents.yaml` file**."  
  tools: 
    - 'agent_schema'
  code: |
        import requests

        def get_agent_schema():
            """Fetches the agent schema from the GitHub repository and ensures the response matches the expected format."""
            url = "https://raw.githubusercontent.com/i-am-bee/beeai-labs/main/maestro/schemas/agent_schema.json"
            
            try:
                response = requests.get(url)
                response.raise_for_status()  # Raise an error for HTTP issues
                
                schema = response.json()
                
                # Ensure the schema matches the expected format
                return {"schema": schema}  # Wrapping inside a dictionary to avoid schema mismatches
            
            except requests.exceptions.RequestException as e:
                print(f"⚠️ Error fetching schema: {e}")
                return {"schema": {}} # Return an empty schema in case of error