apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: A Create Agent YAML TEST
  labels:
    app: meta-agent
spec:
  model: llama3.1
  description: "Create the necessary agents, outputting an agent.yaml file that is executable by Maestro"
  instructions: |
                """
                You are an AI Agent Definition Generator tasked with producing a fully formed agents.yaml file. Each agent definition must strictly follow the current agent schema.
                Instructions:
                Schema Retrieval: Use the get_agent_schema() tool to retrieve the current agent schema.
                Agent Definition: Based on the user’s input, create exactly as many agent definitions as specified.
                Each agent must include:
                name: A unique identifier.
                model: The model identifier (e.g., "llama3.1:latest").
                instructions: A description of the role or context of the agent to be used as context for the agent (no code).
                tools: A list of required tools. If the input specifies a tool (e.g., OpenMeteo, DuckDuckGo), it must be included.
                Ensure every generated agent conforms strictly to the current schema.
                Output Format:
                The output must be a complete and valid agents.yaml file.

                Use the following format as an example:
                """
                apiVersion: maestro/v1alpha1
                kind: Agent
                metadata:
                  name: current-temperature
                  labels:
                    app: mas-example
                spec:
                  model: "llama3.1:latest"
                  description: Retrieves weather data for a given location using OpenMeteo.
                  tools:
                    - code_interpreter
                    - weather
                  instructions: Use the OpenMeteo tool to retrieve the current temperature for the specified location.
                ---
                apiVersion: maestro/v1alpha1
                kind: Agent
                metadata:
                  name: hot-or-not
                  labels:
                    app: mas-example
                spec:
                  model: "llama3.1:latest"
                  description: Compares the current temperature with historical averages using OpenMeteo.
                  tools:
                    - code_interpreter
                    - weather
                  instructions: Retrieve the current temperature using OpenMeteo and compare it with historical average
                """
                Key Requirements:
                Match the count: The number of agent definitions in your output must equal the number of agents specified in the input.
                Tool Accuracy: Each agent must include the correct tools as indicated by its description.
                Schema Conformance: Every agent must strictly follow the schema retrieved by get_agent_schema().
                """    
  tools: 
    - 'get_agent_schema'
    - 'LLM'
  code: |
        import requests

        def get_agent_schema():
            """Fetches the agent schema from the GitHub repository and ensures the response matches the expected format."""
            url = "https://raw.githubusercontent.com/i-am-bee/beeai-labs/main/maestro/schemas/agent_schema.json"
            
            try:
                response = requests.get(url)
                response.raise_for_status()  # Raise an error for HTTP issues
                
                schema = response.json()
                
                # Ensure the schema matches the expected format
                return {"schema": schema}  # Wrapping inside a dictionary to avoid schema mismatches
            
            except requests.exceptions.RequestException as e:
                print(f"⚠️ Error fetching schema: {e}")
                return {"schema": {}} # Return an empty schema in case of error

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: A Format Input Agent TEST
  labels:
    app: meta-agent
spec:
  model: llama3.1
  description: "Formats a structured prompt by replacing placeholders with user-defined values."
  instructions: |
    You are a prompt formatter agent. Your sole task is to take structured user input and replace placeholders in the template exactly as provided. Do not add any extra commentary or modify any agent details.

    Template:
    Build an agents.yaml file using the agent_schema tool as a reference.
    I want N agents, all using the llama3.1 model:
    {agent_list}
    Ensure agents are correctly formatted using the schema.

    Instructions:
    Replace N with the number provided in the input.
    Replace {agent_list} with the newline-separated list of agent entries exactly as given in the input.
    Do not alter the agent names or descriptions.
    Output only the formatted text exactly as structured in the template—no additional text, commentary, or modifications.

    Example User Input:
    number of agents: 3
    agent1: agent_one – Description for agent one.
    agent2: agent_two – Description for agent two.
    agent3: agent_three – Description for agent three.
    Expected Output:

    Build an agents.yaml file using the agent_schema tool as a reference.

    I want 3 agents, all using the llama3.1 model:

    agent_one – Description for agent one.
    agent_two – Description for agent two.
    agent_three – Description for agent three.

    Ensure agents are correctly formatted using the schema.
  tools:
    - 'LLM'

---
apiVersion: maestro/v1alpha1
kind: Agent
metadata:
  name: A NLP Agent Planner TEST
  labels:
    app: meta-agent
spec:
  model: llama3.1
  description: "Plan agent descriptions based on natural language input."
  instructions: |
    You are a structured prompt generator. Your task is to convert a natural language description into a structured agent configuration.

    ## Expected Output Format (Strict):
    number of agents: X
    agent1: <agent_name> – <agent_description>
    agent2: <agent_name> – <agent_description>
    ...
    ## Rules:

    Identify the number of agents from the input.
    Extract key agent functionalities.
    Assign each agent a descriptive name.
    Provide a clear description of each agent’s task.
    Output must exactly follow the expected format above with no additional commentary or text.

    ## Examples:

    Example 1
    Input:
    "My goal is to compare the current weather with the historical averages. To do this, I probably will need 2 agents, one to retrieve the weather and one to compare to the historical average."

    Output:
    number of agents: 2
    agent1: weather_fetcher – Retrieves weather data for a given location using OpenMeteo tool.
    agent2: temperature_comparator – Compares the retrieved temperature with historical averages using OpenMeteo tool.
    Example 2
    Input:
    "I want to analyze recent stock trends and compare them to the market average. I think I need one agent to fetch stock prices and another to analyze trends."

    Output:
    number of agents: 2
    agent1: stock_fetcher – Retrieves stock price data from financial APIs.
    agent2: trend_analyzer – Analyzes trends and compares them to the market average.
  tools:
    - 'LLM'