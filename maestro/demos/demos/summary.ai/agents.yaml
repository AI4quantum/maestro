apiVersion: beehive/v1alpha1
kind: Agent
metadata:
  name: Search Arxiv
  labels:
    app: mas-example 
spec:
  model: llama3.1
  description: "Fetches the k most recent article titles from arXiv on a given topic."
  instructions: "Execute the given query using only the fetch tool provided. In your output, only list out the output the function gave you and nothing else. Example output: ['title1', 'title2', .... ]"  
  tools: 
    - 'fetch'
  code: |
        import urllib.request

        def fetch_arxiv_titles(topic: str, k: int = 10):
          """Fetches the k most recent article titles from arXiv on a given topic."""
          url = f"http://export.arxiv.org/api/query?search_query=all:{topic}&sortBy=submittedDate&sortOrder=descending&max_results={k}"

          with urllib.request.urlopen(url) as response:
              data = response.read().decode()

          titles = [line.split("<title>")[1].split("</title>")[0] for line in data.split("\n") if "<title>" in line][1:k+1]
          return titles

---
apiVersion: beehive/v1alpha1
kind: Agent
metadata:
  name: Intermediary
  labels:
    type: connector
spec:
  model: llama3.1
  description: "Combines the output of search agent with prompt of second agent"
  instructions: "Use the LLM tool to output the following text exactly, replacing `{input_list}` with the given list: 'Use filtering tool using these as parameters: fetch_valid_arxiv_titles(titles=title_list), where title_list is: {input_list}'. Do not process, explain, or modify the list in any way—just insert it and return the exact text. We will not be using any tools or functions, just want to print out the sentence."  
  tools:
    - 'LLM'

    
---
apiVersion: beehive/v1alpha1
kind: Agent
metadata:
  name: Filter
  labels:
    app: mas-example
spec:
  model: llama3.1
  description: "Filters and selects the most relevant papers based on abstract similarity to the topic."
  instructions: "Execute the given query using only the filtering tool provided. In your output, only list out the output the function gave you and nothing else. Example output: ['title1', 'title2', .... ]"
  tools: 
    - 'filtering'
  code: |
        import urllib.request
        import urllib.parse
        import re

        def fetch_valid_arxiv_titles(titles: list):
            """
            Fetches titles that have an available abstract on ArXiv.

            Args:
                titles (list): List of paper titles.

            Returns:
                list: Titles that have an abstract.
            """
            base_url = "http://export.arxiv.org/api/query?search_query="
            valid_titles = []

            for title in titles:
                search_query = f'all:"{urllib.parse.quote(title)}"'
                url = f"{base_url}{search_query}&max_results=1"
                try:
                    with urllib.request.urlopen(url) as response:
                        data = response.read().decode()
                except Exception as e:
                    continue

                abstract_match = re.search(r"<summary>(.*?)</summary>", data, re.DOTALL)

                if abstract_match:
                    valid_titles.append(title)
                else:
                    print(f"❌ No abstract found: {title}")
            return valid_titles

# ---
# apiVersion: beehive/v1alpha1
# kind: Agent
# metadata:
#   name: Summary
#   labels:
#     app: mas-example
# spec:
#   model: llama3.1
#   description: "creates a summary of the arxiv paper"
#   instructions: "use the LLM tool to generate a high level summary for the given input text. Do not include anything related to code, merely provide descriptions, overviews, and introduction to what is being discussed."
#   tools: 
#     - 'llm'

---
apiVersion: beehive/v1alpha1
kind: Agent
metadata:
  name: Individual Summary
  labels:
    app: mas-example
spec:
  model: llama3.1
  description: "creates a summary of the arxiv paper given a title"
  instructions: "You will be given the title of a research paper from ArXiv. Your task is to generate a detailed and confident summary of the core topics related to the title, even if the title is highly complex or abstract. You do not need to find the actual paper—just summarize the general subject area based on relevant knowledge. Do not include disclaimers such as 'I don't know' or 'It appears to be about.' Instead, provide a direct, authoritative explanation. If the title is highly technical, break it down into simpler components, explain each part clearly, and then summarize the overarching topic. The summary must be at least three paragraphs long and focus on key concepts, challenges, and potential applications."
  tools: 
    - 'llm'